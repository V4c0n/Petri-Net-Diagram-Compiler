grammar language;

options
{
  k = 1;
  language = Java;
}

@lexer::header
{ 
  package myCompiler;
}

@lexer::members
{ }
    
@header
{
  package myCompiler;
  
  import mvc.*;
  import myComponents.*;
  import org.antlr.runtime.*;
}
 
@members
{
  public ParserEnvironment env;

  void init()
  { 
    env = new ParserEnvironment();
  }
 
  // Override of ANTLR syntax error messages 
  public void displayRecognitionError(String[] tokenNames,RecognitionException e)
  {
        String errorHeader = getErrorHeader(e);
        String errorMessage = getErrorMessage(e, tokenNames);
        String errorClass = e.getClass().toString();
        errorClass = errorClass.substring(errorClass.indexOf(" ")+1, errorClass.length());
        
        String syntaxError = "Exception " + errorClass + ": Unresolved compilation problem:" + "\n"
              + "Syntax error, " + Model.replaceSymbol(errorMessage) + "\n"
              + "at " + errorHeader;
        
        env.syntaxError.add(syntaxError);   
   }
  
} 
//--------------------------------------------------------------------------------------------------------- 
//************************************************ PARSER *************************************************
//---------------------------------------------------------------------------------------------------------

fragment A : 'A'|'a';
fragment B : 'B'|'b'; 
fragment C : 'C'|'c';
fragment D : 'D'|'d';
fragment E : 'E'|'e';
fragment F : 'F'|'f';  
fragment G : 'G'|'g';
fragment H : 'H'|'h';
fragment I : 'I'|'i';
fragment J : 'J'|'j';
fragment K : 'K'|'k';
fragment L : 'L'|'l';  
fragment M : 'M'|'m'; 
fragment N : 'N'|'n';
fragment O : 'O'|'o';
fragment P : 'P'|'p';
fragment Q : 'Q'|'q';
fragment R : 'R'|'r';  
fragment S : 'S'|'s';
fragment T : 'T'|'t';
fragment U : 'U'|'u';
fragment V : 'V'|'v';
fragment W : 'W'|'w';
fragment X : 'X'|'x';
fragment Y : 'Y'|'y';
fragment Z : 'Z'|'z';

//--------------------------------start_rule-------------------------------------------------------------
petri_net
@init
{
  // Init the environment
  init();
}
:
  start     
  state+ 
  transition+ 
  connector
;
             
                       
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------
start: DRAW_START
       na=NAME
       lb=LABEL?
       tok=TOKENS?
       SEMICOL
       {
          // Create a start component and insert into petriNet
          String name = na.getText();
          String label = "";
          String tokens = "";
          
          if (lb != null)
            label = Model.cutDoubleQuote(lb.getText());
            
          if(tok != null)
            tokens = Model.cutParenthesis(tok.getText());  
          
          Start start = new Start(name, label, tokens);
          
          env.petriNet.add(start);
          env.stateNames.add(name);
       }
       ;
     
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------
number returns [String n]
      :
      {n = "";} 
      (
        m=MINUS { if (m != null) n = n.concat(m.getText());}
        |
        p=PLUS { if (p != null) n = n.concat(p.getText());}
      )?
      (
        i=NUM_INT { n = n.concat(i.getText());} 
        |
        f=NUM_FLOAT { n = n.concat(f.getText());}
      )  
      ;
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------
state:
      DRAW_STATE 
      po=position
      naref=NAME
      nam=NAME
      lab=LABEL?
      tok=TOKENS?
      SEMICOL
      {
        // Create a state component and insert into petriNet
        String position = po;
        String nameRef = naref.getText();
        
        String name = nam.getText();
        String label = "";
        String tokens = "";
          
        if (lab != null)
          label = Model.cutDoubleQuote(lab.getText());
        
        if(tok != null)
          tokens = Model.cutParenthesis(tok.getText());
        
        Component state = new State(position, nameRef, name, label, tokens);
        
        env.petriNet.add(state);
        env.stateNames.add(name);
      }
      ; 
   
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------
TOKENS:    
      ( OPEN_P
      
      (MINUS | PLUS)?
      
      ( NUM_INT )+
      CLOSE_P )
      ;
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------
position returns [String s]
        :
        (
          l=LEFT_OF {s = l.getText();}
          |
          r=RIGHT_OF {s = r.getText();}
          |
          a=ABOVE_OF {s = a.getText();}
          |
          b=BELOW_OF {s = b.getText();}
        )
        ;
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------
transition:
    DRAW_TRANSITION 
    pos=position
    narefe=NAME
    names=NAME
    lbl=LABEL?
    SEMICOL
    {
      // Create a transition and insert it into petriNet
      String position = pos;
      String nameRef = narefe.getText();
     
      String name = names.getText();
      String label = "";
          
        if (lbl != null)
          label = Model.cutDoubleQuote(lbl.getText());
      
      Component transition = new Transition(position, nameRef, name, label);
      
      env.petriNet.add(transition);
      env.transitionNames.add(name);

    }
    ;
 
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------
connector:  // They have to be >= 2 to connect a state and a transition
           arrow 
           (arrow)+
           ;
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------
arrow: 
      (
        straight_arrow | curved_arrow
      )
      ;
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------
straight_arrow:
              DRAW_ARROW
              or=NAME
              des=NAME
              SEMICOL
              {
                // Create a straightArrow component and insert into petriNet
                Connector straightArrow = new StraightArrow(or.getText(),des.getText());
                env.petriNet.add(straightArrow);
                env.referenceNames.add(or.getText());
                env.referenceNames.add(des.getText());
              } 
              ;
//--------------------------------------------------------------------------------------------------------             
       
//--------------------------------------------------------------------------------------------------------
curved_arrow:
             DRAW_CURVED_ARROW
             ori=NAME
             dest=NAME
             be = bend   
             SEMICOL
             {
                // Create a curvedArrow component and insert into petriNet
                String bend = "";
          
				        if (be != null)
				          bend = Model.cutParenthesis(be);
				        Connector curvedArrow = new CurvedArrow(ori.getText(),dest.getText(), bend);
				        env.petriNet.add(curvedArrow);
				        env.referenceNames.add(ori.getText());
                env.referenceNames.add(dest.getText());
             }
             ;
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------             
bend returns [String bend] :
      (
        op = OPEN_P  
        ex=exit_from_element   
        cp=CLOSE_P 
        {bend = "";
         bend += op.getText() + ex + cp.getText(); 
        }
      )
      ;
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------      
exit_from_element returns [String exit] :
          (
            l=LEFT
            {
              exit = l.getText();
            }
            | 
            r=RIGHT
            {
              exit = r.getText();
            }  
          )
          ;
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------- 
//************************************************* LEXER *************************************************
//---------------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------------
DRAW_START: D R A W UNDERSCORE S T A R T;
//--------------------------------------------------------------------------------------------------------    

//--------------------------------------------------------------------------------------------------------
DRAW_ARROW: D R A W UNDERSCORE A R R O W;
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------
DRAW_CURVED_ARROW:  D R A W UNDERSCORE C U R V E D UNDERSCORE A R R O W;
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------            
DRAW_STATE:  D R A W UNDERSCORE S T A T E;            
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------            
DRAW_TRANSITION:  D R A W UNDERSCORE T R A N S I T I O N;            
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------
LEFT_OF: L E F T UNDERSCORE O F;
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------         
RIGHT_OF: R I G H T UNDERSCORE O F;
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------          
ABOVE_OF: A B O V E UNDERSCORE O F;
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------
BELOW_OF: B E L O W UNDERSCORE O F;
//--------------------------------------------------------------------------------------------------------         

//--------------------------------------------------------------------------------------------------------          
LEFT: L E F T;
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------         
RIGHT: R I G H T;
//--------------------------------------------------------------------------------------------------------         

//--------------------------------------------------------------------------------------------------------
ABOVE: A B O V E;
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------
BELOW: B E L O W;
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------
OVER: O V E R;
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------
UNDER: U N D E R;
//--------------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------------
fragment LETTER:
       ('a'..'z'
       |'A'..'Z')
       ;
//--------------------------------------------------------------------------------------------------------


// Symbols definition-------------------------------------------------------------------------------------
AT           : '@' ;
DOUBLE_QUOTE : '"' ;
PERCENT      : '%' ;
AMP          : '&' ;
SINGLE_QUOTE : '\'';
OPEN_P       : '(' ;
CLOSE_P      : ')' ;
OPEN_SB      : '[' ;
OPEN_GRAPH   : '{' ;
CLOSE_GRAPH  : '}' ;
CLOSE_SB     : ']' ;
ASTERISK     : '*' ;
PLUS         : '+' ;
MINUS        : '-' ;
DOT          : '.' ;
COMMA        : ',' ;
COL          : ':' ; 
SEMICOL      : ';' ;
SLASH        : '/' ;
BACK_SLASH   : '\\';
EQ           : '=' ;
NOT_EQ       : '<>';
LESS_THAN    : '<' ;
GREATER_THAN : '>' ;
LESS_EQ      : '<=';
GREATER_EQ   : '>=';
QUEST        : '?' ;
UNDERSCORE   : '_' ;
VERT_BAR     : '|' ;
APICS        : '^' ;
//--------------------------------------------------------------------------------------------------------
 

// NUMBERS-------------------------------------------------------------------------------------------------
NUM_INT: '0'| (('1'..'9')('0'..'9')*);

NUM_FLOAT : NUM_INT | (NUM_INT DOT NUM_INT+ ) | ( DOT NUM_INT+ );
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------       
NAME: // Starts with a letter then it can have more letters or numbers or underscore
      LETTER (LETTER | NUM_INT | UNDERSCORE)*;
//--------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------
LABEL:    
      ( DOUBLE_QUOTE
      ( LETTER 
      | NUM_INT
      | UNDERSCORE
      | OPEN_SB
      | OPEN_P
      | CLOSE_P
      | CLOSE_SB
      | APICS
      | ASTERISK
      | SLASH
      | MINUS
      | PLUS
      | OPEN_GRAPH
      | CLOSE_GRAPH
      | ' '
      )+
      DOUBLE_QUOTE )
      ;
//--------------------------------------------------------------------------------------------------------


// Blank spaces and indentation------------------------------------------------------------------------
WS  : (
        ' '
        | '\t'
        | '\r'
        | '\n'
      )
      {
        $channel=HIDDEN;
      };
//--------------------------------------------------------------------------------------------------------      

//--------------------------------------------------------------------------------------------------------      
SCAN_ERROR   
  :
    . // Jolly character: ideantifies everything has not been identifyed
  ; 
//--------------------------------------------------------------------------------------------------------      
  
  
 